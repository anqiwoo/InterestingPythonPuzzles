'''
1. SQL是访问和操作关系数据库的计算机标准语言(SQL是结构化查询语言Structured Query Language的缩写)。
    - 无论用什么编程语言（Java、Python、C++……）编写程序，只要涉及到操作关系数据库，比如，一个电商网站需要把用户和商品信息存入数据库，或者一个手机游戏需要把用户的道具、通关信息存入数据库，都必须通过SQL来完成。
    - 所以，现代程序离不开关系数据库，要使用关系数据库就必须掌握SQL。
    - NoSQL: 非SQL的数据库，包括MongoDB、Cassandra、Dynamo等等，它们都不是关系数据库。
        1970: NoSQL = We have no SQL
        1980: NoSQL = Know SQL
        2000: NoSQL = No SQL!
        2005: NoSQL = Not only SQL
        2013: NoSQL = No, SQL!
    - 今天，SQL数据库仍然承担了各种应用程序的核心数据存储，而NoSQL数据库作为SQL数据库的补充，两者不再是二选一的问题，而是主从关系。所以，无论使用哪种编程语言，无论是Web开发、游戏开发还是手机开发，掌握SQL，是所有软件开发人员所必须的。
    - 虽然SQL已经被ANSI组织定义为标准，不幸地是，各个不同的数据库对标准的SQL支持不太一致。并且，大部分数据库都在标准的SQL上做了扩展。也就是说，如果只使用标准SQL，理论上所有数据库都可以支持，但如果使用某个特定数据库的扩展SQL，换一个数据库就不能执行了。例如，Oracle把自己扩展的SQL称为PL/SQL，Microsoft把自己扩展的SQL称为T-SQL。
    - 现实情况是，如果我们只使用标准SQL的核心功能，那么所有数据库通常都可以执行。不常用的SQL功能，不同的数据库支持的程度都不一样。而各个数据库支持的各自扩展的功能，通常我们把它们称之为“方言”。
    - 总的来说，SQL语言定义了这么几种操作数据库的能力：
        - DDL：Data Definition Language
            DDL允许用户定义数据，也就是创建表、删除表、修改表结构这些操作。通常，DDL由数据库管理员执行。
        - DML：Data Manipulation Language
            DML为用户提供添加、删除、更新数据的能力，这些是应用程序对数据库的日常操作。
        - DQL：Data Query Language
            DQL允许用户查询数据，这也是通常最频繁的数据库日常操作。
    - 语法特点：SQL语言关键字不区分大小写！！！但是，针对不同的数据库，对于表名和列名，有的数据库区分大小写，有的数据库不区分大小写。同一个数据库，有的在Linux上区分大小写，有的在Windows上不区分大小写。所以，建议：SQL关键字总是大写，以示突出，表名和列名均使用小写。

2. 关系数据库
    - 为什么需要数据库？因为应用程序需要保存用户的数据。数据库作为一种专门管理数据的软件就出现了。应用程序不需要自己管理数据，而是通过数据库软件提供的接口来读写数据。至于数据本身如何存储到文件，那是数据库软件的事情，应用程序自己并不关心。这样一来，编写应用程序的时候，数据读写的功能就被大大地简化了！
    - 数据模型：数据库按照数据结构来组织、存储和管理数据，实际上，数据库一共有三种模型
        - 层次模型：以“上下级”的层次关系来组织数据的一种方式，层次模型的数据结构看起来就像一颗树
        - 网状模型：把每个数据节点和其他很多节点都连接起来，它的数据结构看起来就像很多城市之间的路网
        - 关系模型：把数据看作是一个二维表格，任何数据都可以通过行号+列号来唯一确定，它的数据模型看起来就是一个Excel表
    - 随着时间的推移和市场竞争，最终，基于关系模型的关系数据库获得了绝对市场份额。Why？因为相比层次模型和网状模型，关系模型理解和使用起来最简单。
    - 数据类型
        - 对于一个关系表，除了定义每一列的名称外，还需要定义每一列的数据类型。
        - 关系数据库支持的标准数据类型包括数值、字符串、时间等。
        - 选择数据类型的时候，要根据业务规则选择合适的类型。通常来说，BIGINT能满足整数存储的需求，VARCHAR(N)能满足字符串存储的需求，这两种类型是使用最广泛的。
    - 主流关系数据库
        - 商用数据库，例如：Oracle，Microsoft SQL Server，IBM DB2等；
        - 开源数据库，例如：MySQL，PostgreSQL等；
        - 桌面数据库，以微软Access为代表，适合桌面应用程序使用；
        - 嵌入式数据库，以Sqlite为代表，适合手机应用和桌面程序。

3. 关系模型
    - 关系数据库是建立在关系模型上的。而关系模型本质上就是若干个存储数据的二维表，可以把它们看作很多Excel表。
        - 表的每一行称为记录（Record），记录是一个逻辑意义上的数据。
        - 表的每一列称为字段（Column），同一个表的每一行记录都拥有相同的若干字段。
            - 字段定义了数据类型（整型、浮点型、字符串、日期等），以及是否允许为NULL。
            - 注意NULL表示字段数据不存在。一个整型字段如果为NULL不表示它的值为0，同样的，一个字符串型字段为NULL也不表示它的值为空串''。
            - 通常情况下，字段应该避免允许为NULL。不允许为NULL可以简化查询条件，加快查询速度，也利于应用程序读取数据后无需判断是否为NULL。
        - 和Excel表有所不同的是，关系数据库的表和表之间需要建立“一对多”，“多对一”和“一对一”的关系，这样才能够按照应用程序的逻辑来组织和存储数据。在关系数据库中，关系是通过主键和外键来维护的。
            - 主键
                - 主键是关系表中记录的唯一标识。对于关系表，有个很重要的约束，就是任意两条记录不能重复，即能够通过某个字段唯一区分出不同的记录，这个字段被称为主键。
                - 对主键的要求，最关键的一点是：记录一旦插入到表中，主键最好不要再修改，因为主键是用来唯一定位记录的，修改了主键，会造成一系列的影响。
                    - 由于主键的作用十分重要，如何选取主键会对业务开发产生重要影响。如果我们以学生的身份证号作为主键，似乎能唯一定位记录。然而，身份证号也是一种业务场景，如果身份证号升位了，或者需要变更，作为主键，不得不修改的时候，就会对业务产生严重影响。所以，选取主键的一个基本原则是：不使用任何业务相关的字段作为主键。主键也不应该允许NULL。
                - 作为主键最好是完全业务无关的字段，我们一般把这个字段命名为id。常见的可作为id字段的类型有：
                    - 自增整数类型：数据库会在插入数据时自动为每一条记录分配一个自增整数，这样我们就完全不用担心主键重复，也不用自己预先生成主键；
                        - 对于大部分应用来说，通常自增类型的主键就能满足需求。我们在students表中定义的主键也是BIGINT NOT NULL AUTO_INCREMENT类型。
                        - 如果使用INT自增类型，那么当一张表的记录数超过2147483647（约21亿）时，会达到上限而出错。使用BIGINT自增类型则可以最多约922亿亿条记录。
                    - 全局唯一GUID类型：使用一种全局唯一的字符串作为主键，类似8f55d96b-8acc-4636-8cb8-76bf8abc2f57。GUID算法通过网卡MAC地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了GUID算法，可以自己预算出主键。
                - 关系数据库实际上还允许通过多个字段唯一标识记录，即两个或更多的字段都设置为主键，这种主键被称为联合主键。对于联合主键，允许一列有重复，只要不是所有主键列都重复即可。没有必要的情况下，我们尽量不使用联合主键，因为它给关系表带来了复杂度的上升。
            - 外键
                - 关系数据库通过外键可以实现一对多、多对多和一对一的关系。外键既可以通过数据库来约束，也可以不设置约束，仅依靠应用程序的逻辑来保证。
                - 在students表中，通过class_id的字段，可以把数据与另一张表关联起来，这种列称为外键。外键并不是通过列名实现的，而是通过定义外键约束实现的：
                    ALTER TABLE students
                    ADD CONSTRAINT fk_class_id
                    FOREIGN KEY (class_id)
                    REFERENCES classes (id);
                    其中，外键约束的名称fk_class_id可以任意，FOREIGN KEY (class_id)指定了class_id作为外键，REFERENCES classes (id)指定了这个外键将关联到classes表的id列（即classes表的主键）。
                - 通过定义外键约束，关系数据库可以保证无法插入无效的数据。即如果classes表不存在id=99的记录，students表就无法插入class_id=99的记录。
                - 由于外键约束会降低数据库的性能，大部分互联网应用程序为了追求速度，并不设置外键约束，而是仅靠应用程序自身来保证逻辑的正确性。这种情况下，class_id仅仅是一个普通的列，只是它起到了外键的作用而已。
                - 要删除一个外键约束，也是通过ALTER TABLE实现的
                    ALTER TABLE students
                    DROP FOREIGN KEY fk_class_id;
                    注意：删除外键约束并没有删除外键这一列。删除列是通过DROP COLUMN ...实现的。
                - 多对多关系实际上是通过两个一对多关系实现的，即通过一个中间表，关联两个一对多关系，就形成了多对多关系。
                - 一对一关系是指，一个表的记录对应到另一个表的唯一一个记录。
                    - 如果业务允许，完全可以把两个表合为一个表。
                    - 还有一些应用会把一个大表拆成两个一对一的表，目的是把经常读取和不经常读取的字段分开，以获得更高的性能。
        - 索引：通过对数据库表创建索引，可以提高查询速度。数据库索引对于用户和应用程序来说都是透明的。
            - 索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。
            - 如果要经常根据score列进行查询，就可以对score列创建索引
                ALTER TABLE students
                ADD INDEX idx_score (score);
                使用ADD INDEX idx_score (score)就创建了一个名称为idx_score，使用列score的索引。
                
                索引名称是任意的，索引如果有多列，可以在括号里依次写上
                ALTER TABLE students
                ADD INDEX idx_score (score, name);
            - 索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。
            - 可以对一张表创建多个索引。索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。(利于查询；不利于读写)
            - 对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。
            - 通过创建唯一索引 / 使用唯一约束，可以保证某一列的值具有唯一性。
                唯一索引：
                ALTER TABLE students
                ADD UNIQUE INDEX uni_name (name);
                
                唯一约束：
                ALTER TABLE students
                ADD CONSTRAINT uni_name UNIQUE (name); 
            



4. 一种最流行的开源数据库MySQL的基本安装和使用方法
    - MySQL是目前应用最广泛的开源关系数据库。MySQL最早是由瑞典的MySQL AB公司开发，该公司在2008年被SUN公司收购，紧接着，SUN公司在2009年被Oracle公司收购，所以MySQL最终就变成了Oracle旗下的产品。
    - 和其他关系数据库有所不同的是，MySQL本身实际上只是一个SQL接口，它的内部还包含了多种数据引擎，常用的包括：
        - InnoDB：由Innobase Oy公司开发的一款支持事务的数据库引擎，2006年被Oracle收购；
        - MyISAM：MySQL早期集成的默认数据库引擎，不支持事务。
    - MySQL接口和数据库引擎的关系就好比某某浏览器和浏览器引擎（IE引擎或Webkit引擎）的关系。对用户而言，切换浏览器引擎不影响浏览器界面，切换MySQL引擎不影响自己写的应用程序使用MySQL的接口。使用MySQL时，不同的表还可以使用不同的数据库引擎。如果你不知道应该采用哪种引擎，记住总是选择InnoDB就好了。
    - 因为MySQL一开始就是开源的，所以基于MySQL的开源版本，又衍生出了各种版本：
        - MariaDB：由MySQL的创始人创建的一个开源分支版本，使用XtraDB引擎。
        - Aurora：由Amazon改进的一个MySQL版本，专门提供给在AWS托管MySQL用户，号称5倍的性能提升。
        - PolarDB：由Alibaba改进的一个MySQL版本，专门提供给在阿里云托管的MySQL用户，号称6倍的性能提升。
    
'''
